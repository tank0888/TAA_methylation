import os
import pandas as pd
import re

def process_peptide_data(file_path, prot_seq):
    df1 = pd.read_csv(file_path)
    k_sites = [i + 1 for i, char in enumerate(prot_seq) if char == 'K']
    data = {'Ksite': k_sites}
    df2 = pd.DataFrame(data)
    df2['Kabc_total'] = 0.0
    df2['Kabc_mono'] = 0.0
    df2['Kabc_di'] = 0.0
    df2['Kabc_tri'] = 0.0

    for index, row in df1.iterrows():
        abundance = float(row["Abundance"])
        peptide_positions = row["Positions"].split("[")
        peptide_positions.pop(0)
        peptide_positions = [int(pos.split('-')[0]) for pos in peptide_positions]
        abundance /= len(peptide_positions)  # Divide abundance by the number of positions

        peptide_seq = row["Sequence"].split(".")[1]
        residue_positions = [i + 1 for i, char in enumerate(peptide_seq) if char == 'K']
        
        for res_pos in residue_positions:
            for pep_pos in peptide_positions:
                position = res_pos + pep_pos - 1
                df2.loc[df2['Ksite'] == position, 'Kabc_total'] += abundance
        
        process_modifications(row["Modifications"], peptide_positions, df2, abundance)

    calculate_ratios(df2)
    return df2

def process_modifications(modifications, peptide_positions, df2, abundance):
    if pd.isna(modifications):
        return 
    
    modifications = str(modifications) 
    for mod_type, col_name in [("Trimethyl", 'Kabc_tri'), ("Dimethyl", 'Kabc_di'), ("Methyl", 'Kabc_mono')]:
        if mod_type in modifications:
            mod_data = modifications.split(f"{mod_type} [")
            mod_positions = re.findall(r'K(\d+)\((\d+)\)', mod_data[1])
            if not mod_positions:  # If modification position data is missing (e.g., percentages are not included)
                continue  # Skip processing this modification
            for pos, rate in mod_positions:
                for pep_pos in peptide_positions:
                    position = int(pos) + pep_pos - 1
                    df2.loc[df2['Ksite'] == position, col_name] += abundance * int(rate) / 100
            modifications = mod_data[0]

def calculate_ratios(df2):
    df2['Kabc_non'] = df2['Kabc_total'] - df2['Kabc_mono'] - df2['Kabc_di'] - df2['Kabc_tri']
    ratio_columns = ['Kratio_mono', 'Kratio_di', 'Kratio_tri', 'Kratio_non']
    for col in ratio_columns:
        df2[col] = 0.0
    for i in range(len(df2)):
        total = float(df2.at[i, "Kabc_total"])
        if total > 0:
            df2.at[i, "Kratio_mono"] = df2.at[i, "Kabc_mono"] / total
            df2.at[i, "Kratio_di"] = df2.at[i, "Kabc_di"] / total
            df2.at[i, "Kratio_tri"] = df2.at[i, "Kabc_tri"] / total
            df2.at[i, "Kratio_non"] = df2.at[i, "Kabc_non"] / total

def main():
    input_folder = "output1"
    output_folder = "output2"
    target_seq = "MNKIYKVIWNATLLAWVAVSELAKGKTKSTTSKSKAKSLSSSVIVGGIILTTPLSLIAATVQVGGGTNSGTTATASTNCADLYNYQNPENSGSGAAGNYNAGNPSVCSIAIGENAQGGTSGTGGSPGIAIGGNSKATGGLSVAIGGYAQATNVGSIALGTAALSSGFNSLAISRQAAATNNYSIAIGTTSVSKGVGSIAMGHSTNASGDQSIAIGSSDAVNSATATTTYDGTTNTQASGSKSIAIGASAKASTNNSIALGAGSVTSAQSGNSYLTGVGASATNGVVSVGTSTATRRIQNVADGSAASDAVTVAQLDKAYDDTNGRLAAALGTGSGAAYNAANNTYTAPTNIGGTGKNTIDDAIKATQRSVVAGSNIVVTPTTASDGSISYSVATSATPTFTSITVNNAPTAGTDATNKTYVDSKAAASRTEVAAGSNVSGVVKTTGANGQDVYTVNANGTTASAGSSAVTVTPGTKDANNVTDYKVDLSATTKTDIQKGVDAKNAVDTAGLKFKGDTATTSNTKKLGDTVSITGDTNISTVATTDGVQVKLNPNLDLGATGSVKTGNTTINNAGVTADQVTVGGVVINNTSGINAGGKAITNVAAPTNNTDAANKKYVDDAGTALTNLGFGLKAQDGTTVNKKLGEAVDIVGSNSNISTKVNAGKVEVALSNTLDLGTTGSVTTGSTVINNAGVTATQVTANKVTINNAPTAGTDATNKTYVDSKAAASRTEVAAGSNVSGVVKTTGANGQDIYAVNANGTTASAGSSAVTVTPGTKDANNVTDYKVDLSATTKTDIQKGVDAKNAVDTAGLKFKGDTATTSNTKKLGDTVSITGDTNISTVATTDGVQVKLNPNLDLGATGSVKTGNTTINNAGVTADQVTVGGVVINNTSGINAGGKAITNVAAPTNNTDAANKKYVDDAGTALTNLGFGLKAQDGTTVNKKLGEAVDIVGSNSNISTKVNAGKVEVALSNTLDLGTTGSVTTGSTVINNAGVTATQVTANKVTVNNAPTAGTDATNKTYVDSKAAASRTEVAAGSNVSGVVKTTGANGQDVYTVNANGTTASAGSSAVTVTPGTKDANNVTDYKVDLSATTKTDIQKGVDAKNAVDTAGLKFKGDTATTSNTKKLGDTVSITGDTNISTVATTDGVQVKLNPNLDLGATGSVKTGNTTINNAGVTADQVTVGGVVINNTSGINAGGKAITNVAAPTNNTDAANKKYVDDAGTALTNLGFGLKAQDGTTVNKKLGEAVEVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISVKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSVNYNNITLAGTTASSTQDATTGKITTTGGTSLNNVASAGDYKDVANASKGVNAGDLNNAVVDATNAATSKGFALQAADGAKVQKNLGEAVEVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISVKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNTDGSTNYNSITAGNGNGTAATIGTDTAGNSVVTSGGTKISNVANGVNASDAVNKGQLDSLSTGLTNTGFGLKAADGNTVNKKLGEAVDVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISIKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSANYNNITLAGTTASSTQDATTGKITTTGGTSLNNVASAGDYKDVANASKGVNAGDLNNAVVDATNAATSKGFALQAADGAKVQKNLGEAVEVVGADSNITTKVVGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISVKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSVNYNNITLAGTTASSTQDATTGKITTTGGTSLNNVASAGDYKDVANASKGVNAGDLNNAVVDATNAATSKGFALQAADGAKVQKNLGEAVEVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISVKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSVNYNNITLAGTTASSTQDATTGKITTTGGTSLNNVASAGDYKDVANASKGVNAGDLNNAVVDATNAATSKGFALQAADGAKVQKNLGEAVEVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISVKDGSGNTIAGVDNTALTVKDGSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSANYNNVTLAGTNGTIISNVKAGAVTSTSTDAINGSQLYGVANSVKNAIGGSTTIDATTGAITTTNIGGTGSNTIDGAISSIKDSATKAKTTVSAGDNVVVTSGTNADGSTNYEVATAKDVNFDKVTVGSVVVDKSSNTIKGLSNTTWNGTAVSGQAATEDQLKTVSDAQGETDKFAVKYDKNADGSANYNSITAGNGNGTAATIGTDTAGNSVVTSGGTKISNVANGVNASDAVNKGQLDSLSTGLTNTGFGLKAADGNTVNKKLGEAVDVVGADSNITTKVAGGQVAIELNKNLNNLTGITVNDGTNGTNGSTVIGKDGISIKDGSGNTIAGVDNTALTVKDSSGNTETSINQAINTLNAAQGETDKFAVKYDKNADGSVNYNNVTLAGTNGTIIRNVKAGAVTSTSTDAINGSQLYDIANSVKNAIGGSTTRDVTTGAITTTNIGGTGSNTIDGAISSIKDSATKAKTTISAGDNVVVTSGTNADGSTNYEVATAKDVNFDKVTVGNVVVDKANDTIQGLSNKDLNSTDFATKGRAATEEQLKAVITSNITEVVDGNGNKVNIIDQVVNTKPDNKNQDSLFLTYDKQGQETTDRLTIGQTVQKMNTDGIKFFHTNADTSKGDLGTTNDSSAGGLNSTAIGVNAIVANGADSSVALGHNTKVNGKQSIAIGSGAEALGNQSISIGTGNKVTGDHSGAIGDPTIVNGANSYSVGNNNQVLTDDTFVLGNNVTKTIAGSVVLGNGSAATTGAGEAGYALSVATNADKAAITKTTSSTGAVAVGDASSGIYRQITGVAAGSVDSDAVNVAQLKAVGNQVVTTQTTLVNSLGGNAKVNADGTITGPTYNVAQGNQTNVGDALTALDNAINTAATTSKSTVSNGQNIVVSKSKNADGSDNYEVSTAKDLTVDSVKAGDTVLNNAGITIGNNAVVLNNTGLTISGGPSVTLAGIDAGNKTIQNVANAVNATDAVNKGQLDSAINNVNNNVNELANNAVKYDDASKDKITLGGGATGTTITNVKDGTVAQGSKDAVNGGQLWNVQQQVDQNTTDISNIKNDINNGTVGLVQQAGKDAPVTVAKDTGGTTVNVAGTDGNRVVTGVKEGAVNATSKDAVNGSQLNTTNQAVVNYLGGGAGYDNITGSFTAPSYTVGDSKYNNVGGAIDALNQADQALNSKIDNVSNKLDNAFRITNNRIDDVEKKANAGIAAAMALESAPYVPGKYTYAAGAAYHGGENAVGVTLRKTADNGRWSITGGVAAASQGDASVRIGISGVID"

    file_names = os.listdir(input_folder)
    for file_name in file_names:
        file_path = os.path.join(input_folder, file_name)
        df_out = process_peptide_data(file_path, target_seq)
        df_out.columns = [
            'Position of residues in AtaA', 
            'Total abundance', 
            'Abundance of monomethylated residue',
            'Abundance of dimethylated residue',
            'Abundance of trimethylated residue',
            'Abundance of unmethylated residue',
            'Ratio of monomethylated residue',
            'Ratio of dimethylated residue',
            'Ratio of trimethylated residue',
            'Ratio of unmethylated residue'
            ]
        df_out.to_csv(f"{output_folder}/{file_name}")

if __name__ == "__main__":
    main()
